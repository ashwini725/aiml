def a_star(start_node, stop_node):
    open_set = {start_node}
    closed_set = set()
    parents = {start_node: start_node}
    g = {start_node: 0}

    def heuristic(n):
        h_dist = {'A': 10, 'B': 8, 'C': 5, 'D': 7, 'E': 3, 'F': 6, 'G': 5, 'H': 3, 'I': 1, 'J': 0}
        return h_dist[n]

    def get_neighbors(v):
        return Graph_nodes[v] if v in Graph_nodes else []

    while open_set:
        n = min(open_set, key=lambda node: g[node] + heuristic(node))

        for m, weight in get_neighbors(n):
            if m not in closed_set:
                if m not in open_set:
                    open_set.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight
                elif g[m] > g[n] + weight:
                    g[m] = g[n] + weight
                    parents[m] = n

        closed_set.add(n)
        open_set.remove(n)

        if n == stop_node:
            path = [stop_node]
            while parents[n] != n:
                path.append(parents[n])
                n = parents[n]
            path.reverse()
            print(f'Path found: {path}')
            return path

    print('Path does not exist!')
    return None

Graph_nodes = {'A': [('B', 6), ('F', 3)], 'B': [('C', 3), ('D', 2)], 'C': [('D', 1), ('E', 5)],
               'D': [('C', 1), ('E', 8)], 'E': [('I', 5), ('J', 5)], 'F': [('G', 1), ('H', 7)],
               'G': [('I', 3)], 'H': [('I', 2)], 'I': [('E', 5), ('J', 3)]}

a_star('A', 'J')
